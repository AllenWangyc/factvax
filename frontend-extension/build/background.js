"use strict";function a(e){u(e)}function u(e){e.data===void 0&&(e.data={}),e.method=e.method||"post";let t={},s=null;e.token&&(t.Authorization=`Bearer ${e.token}`),e.formData?(s=new FormData,Object.keys(e.data).forEach(function(n){s.append(n,e.data([n]))})):(t["Content-Type"]="application/json;charset=UTF-8",s=JSON.stringify(e.data));let o={method:e.method,headers:t,...e.method.toLowerCase()==="get"?{}:{body:s}};console.log(o),fetch(e.url,o).then(n=>n.json()).then(n=>{e.done&&e.done(),e.success&&e.success(n)}).catch(()=>{e.done&&e.done(),e.fail&&e.fail(API_FAILED)})}const c="https://fact-vax-app-e8d263b7267d.herokuapp.com/",l={detect:e=>new Promise((t,s)=>{e.url=c+"api/detect_text/default/",e.method="post",e.success=o=>{t(o)},a(e)}),getTokenByDeviceId:e=>new Promise((t,s)=>{e.url=c+`api/user/device?deviceId=${e.deviceId}`,e.method="get",e.success=o=>{t(o)},a(e)}),getUsernameByToken:e=>new Promise((t,s)=>{e.url=c+"api/user/user_name",e.method="get",e.success=o=>{t(o)},a(e)})};let d=[],r=null;chrome.runtime.onInstalled.addListener(function(){chrome.action.disable(),chrome.declarativeContent.onPageChanged.removeRules(void 0,()=>{const t=[{conditions:[new chrome.declarativeContent.PageStateMatcher({pageUrl:{schemes:["https"]}})],actions:[new chrome.declarativeContent.ShowAction]}];chrome.declarativeContent.onPageChanged.addRules(t)})});chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"detect-text",title:"Detect vinccine information",contexts:["selection"]})});chrome.contextMenus.onClicked.addListener((e,t)=>{e.menuItemId==="detect-text"&&chrome.tabs.sendMessage(t.id,{type:"getText",text:e.selectionText})});chrome.runtime.onMessage.addListener(async function(e,t,s){if(e.device_id){const o=e.device_id;console.log("Received device_id from content script:",o),await chrome.storage.local.set({device_id:o},function(){console.log("device_id stored in chrome.storage.")});const n=await l.getTokenByDeviceId({deviceId:o});if(console.log("The 'getTokenByDeviceId' response from backend is: ",n),n.accessToken){const i=n.accessToken;await chrome.storage.local.set({token:i},function(){console.log("Token stored in chrome.storage:",i)})}else console.error("Failed to retrieve token:",n)}if(e.username){const o=e.username;await chrome.storage.local.set({username:o},function(){console.log("username stored in chrome storage")})}return e.logout&&chrome.storage.local.remove(["token","username"],()=>{console.log("Token and username removed from background")}),!0});chrome.runtime.onMessage.addListener((e,t,s)=>{e.type==="INCREMENT_COUNTER"&&(r?(r.postMessage(e),console.log("The message posted to popup.")):(d.push(e),console.log("The message has been cached in messageQueue.")),s({success:!0}))});chrome.runtime.onConnect.addListener(e=>{e.name==="popup"&&(r=e,d.forEach(t=>r.postMessage(t)),d=[],r.onDisconnect.addListener(()=>{r=null}))});chrome.runtime.onStartup.addListener(function(){chrome.storage.local.get(["device_id"],async function(e){if(e.device_id){const t=e.device_id;console.log("Device ID found on startup:",t);const s=await l.getTokenByDeviceId({deviceId:t});if(console.log("The 'getTokenByDeviceId' response from backend is: ",s),s.accessToken){const o=s.accessToken;await chrome.storage.local.set({token:o}),console.log("Token stored in chrome.storage on startup:",o)}else console.error("Failed to retrieve token on startup:",s)}else console.warn("No device_id found in chrome.storage on startup.")})});
